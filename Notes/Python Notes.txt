print():
  print() syntax:
    print(<var>/<msg>, ....., [end = char], [sep = char])
  print(a, b, c, sep = '_') //By default sep is == ' ', it can be replaced by any character
  print('Gwalior', end = '') //By default end is == '\n', if we need to avoid new line after print statement, use as shown
  print('%d, %d, %d'%(a, b, c)) //Using conversion specifiers
  print("{}, {}, {}".format(a, b, c)) //printing using .format() method, [{} known as specifiers]
  print("{0}, {1}, {2}, {0}, {0}".format(a, b, c)) //can print variable multiple times using index locations
  print("{0:d}, {1:f}, {2}, {0}".format(a, b, c)) //Used for conversions while printing [Cannot convert strings]
  print('{0:10d}\n{1:10d}\n{2:10d}\n{3:10d}'.format(a, b, c, t)) //Right align values by nth spaces in {0:'n'd}
  print('{0:<10d}\n{1:>10d}\n{2:^10d}\n{3:10d}'.format(a, b, c, t)) //[<: left alignment], [>: right alignment], [^: centre alignment]

input():
  input() syntax:
    input('Enter number: ')
  a = input('Enter number: ') //Takes input from the keyboard [always takes input in the form of string]
  a = int(input('Enter number: ')) //int() transforms str to integer
  a = float(input('Enter number: ')) //int() transforms str to float

if statement:
  if (exp) :      //Single if statement
    ===
    ===
  else:
    ===

  if(exp) :       //Multiple if statement
    ===
  elif(exp) :
    ===
  else:
    ===

while loop:
--while exp:
      break/continue

range():
--range(N1, [N2], [D]):
--eg:k = range(1, 11) //it will return range(1, 11), not a list
     k = list(range(1, 11)) //it will return a list fron 1 to 10

for loop:
  for <var> in <container>:
    ====
    [break]
    [continue]

String:
  Strings are immutable (Not reassignable).
  It is a predefined class which also includes its own methods(properties).

Slicing:
  Syntax:
    [si: ei: d]   //si: Start index, ei: end index, d: step
  Operations:
    +: concatinate 2 Strings    //Not efficient, uses more memory
    *: repeats the Strings
    >,<,<=,>=,==: will compare ascii values //same as c
  Functions:
    ord('chr'): returns ascii value of chr
    chr(num): returns
    x.capitalize(): will convert first character into upper case(title case).
    x.title(): will capitalize first letter of each word.
    x.casefold(): will convert the string in lower case.
    x.startswith('str', startIndex, endIndex): This method will return True if string starts with specied substrings.    //Case Sensitive Function
    x.endswith(str, [si], [ei])
    x.center(width, char): creates specified width for the string and fill the space with specified char.
    x.ljust(width, char): same with left alignment
    x.rjust(width, char): same with right alignment
    x.find(str, [si], [ei]): returns the start index of specified substring. Returns -1 if substring doesn't exist.
    x.index(str, [si], [ei]): same as find() but produces exception when substring not found.
    x.rfind(str, [ei], [si]): search in reverse direction.
    x.upper(): converts whole string in to upper case.
    x.lower(): converts whole string in to lower case.
    x.swapcase(): reverse the case of the character.
    //All booleans from here
    x.isalpha(): returns True if str contains alphabets only.
    x.isupper(): check if all upper.
    x.islower(): check if all lower.
    x.isalnum(): returns True if characters are num or alphabets.
    x.istitle(): check for upper first character.
    x.isdigit(): check for digit.
    x.isnumeric(): same as above.
    x.isspace(): check for space.
    x.isdecimal(): check for float.
    x.strip([char]): removes leading and trailing spaces from a string.
    x.lstrip([char]): removes leading spaces.
    x.rstrip([char]): removes trailing spaces.
    x.replace(x, y, [n]): replaces x with y in a string.    //n denotes repetition
    x.count('str'): returns how many times str occured in the string x.
    x.split(<char>/<substr>,[n]) : n represents no. of splits.
    x.rsplit(<char>/<substr>,[n]): same as split but will split from right.
    x.partition(<char>/<substr>): same as split but will include the char on which it is being splited.
    x.zfill(n): fill zeros on the left side of the string according to the width of the whole result.

Tuple:
  It is a container which contains heterogeneous kind of data (data of any datatype)
  Tuples are immutable. It doesnot support reassignment of its elements.
  Declaration:
    t = ()    or    t = tuple()
  tuple() is a constructor.
  Arithematic Operations: +, *
    +: concatinate 2 tuples.
    *: returns same tuple multiple times.
  Logical Operators: >, <, >=, <=, ==
    <,>,<=,>=: compares 2 tuples element by element(not by tuple length).
  Assignment Operator: =, +=
  ==
  Searching in a tuple:
    eg.
      20 in tuple_name    //returns True if 20 is present in tuple_name
  To declare new tuple:
    eg.
      t = (90,)
  Tuple Methods:
    t.__len__(): returns length of tuple.
    t.count(element): returns occurence of element in the tuple t.
    t.index(element, [si], [ei]): returns the index of the element in the tuple t. Produces error if element doesnot exist.

  Functions (common to list and tuple):
    max(x): returns maximum value in the container x.
    min(x): returns minimum value in the container x.
    sum(x): returns sum of the elements in the container x. //should not contain strings in between
    sorted(x, [reverse = False]): sort elements of a container(by default in ascending, for decending change reverse = True).
    any(x): returns True if any one element returns True, else False.
    all(x): returns False if any one element returns False, else True.
